{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"getting-started/","title":"QUICK START","text":"<p>Install using pip</p> <pre><code>pip install dowse\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p><code>dowse</code> is a lightweight framework that abstracts the complexity around building an agent that ingests data sources, routes the command to the appropriate combination of prompts, tools and context, and executes the command and any side effects necessary.</p> <pre><code>import asyncio\nfrom datetime import datetime\n\nfrom pydantic import BaseModel\n\nfrom dowse import AgentExecutor, Processor\nfrom dowse.models import AgentMessage\n\n\ndef get_current_time() -&gt; str:\n    \"\"\"returns the current time\"\"\"\n    return datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n\nclass Note(BaseModel):\n    \"\"\"The base model for data ingested from a data source\"\"\"\n\n    name: str\n    content: str\n\n\nclass UserNote(BaseModel):\n    \"\"\"A note that contains user specific data\"\"\"\n\n    name: str\n    content: str\n    fun_fact: str\n\n\nclass NoteSummary(BaseModel):\n    \"\"\"A psychological analysis of the user who wrote the note.  Relate it to his fun fact and how it might drive them to have this opinion\"\"\"\n\n    summary: str\n    recommendations: list[str]\n    timestamp: str\n\n\nclass AddUserFact(Executor[Note, UserNote]):\n    async def execute(self, note: Note, **kwargs) -&gt; AgentMessage[UserNote]:\n        return AgentMessage(\n            content=self._execute(note),\n            error_message=None,\n        )\n\n    def _execute(self, note: Note) -&gt; AgentMessage[UserNote]:\n        if note.name == \"John\":\n            return UserNote(\n                fun_fact=\"John is a professional juggler who once juggled 17 rubber ducks while riding a unicycle backwards\",\n                **note.model_dump(),\n            )\n        elif note.name == \"Alice\":\n            return UserNote(\n                fun_fact=\"Alice is a quantum physicist who discovered three new particles while making her morning coffee\",\n                **note.model_dump(),\n            )\n        elif note.name == \"Bob\":\n            return UserNote(\n                fun_fact=\"Bob is a master chef who can taste a dish and instantly list all 47 ingredients used to make it\",\n                **note.model_dump(),\n            )\n        raise ValueError(\"No facts for user\")\n\n\nsummarizer = AgentExecutor[\n    UserNote,  # type once all processors are run\n    NoteSummary,  # the output type of the last processor\n](\n    prompt=\"\"\"\n        You are a helpful assistant that receives notes, and you will respond by analyzing the note and\n        how it relates to the user's fun fact.\n\n        Make sure to timestamp and log your response.\n    \"\"\",\n    tools=[\n        get_current_time,\n    ],\n)\n\nexecutor = AddUserFact() &gt;&gt; summarizer\n\nasync def amain() -&gt; None:\n    response: AgentMessage[NoteSummary] = await executor.execute(\n        Note(\n            name=\"John\",\n            content=\"I can't keep up with all these things in flight.  It makes me feel loco!!!\",\n        )\n    )\n    assert (\n        response.error_message is None\n    ), \"this should not error because John is in the user data\"\n\n    print(\"TIMESTAMP:\", response.content.timestamp)\n    print(\"SUMMARY:\", response.content.summary)\n\n    print(\"RECOMMENDATIONS:\")\n    for recommendation in response.content.recommendations:\n        print(\"\\t- \", recommendation)\n\n\nasyncio.run(amain())\n</code></pre> <p>And when we run this we get back something like:</p> <pre><code>TIMESTAMP: 2025-02-18 04:12:10\nSUMMARY: John is probably a person who likes to challenge himself with tasks that require high levels of concentration and multitasking, as evidenced by his ability to juggle 17 rubber ducks while riding a unicycle backwards. This note suggests he might be feeling overwhelmed or stressed by the number of things he has to manage, possibly because they lack the structured environment similar to his juggling act. Juggling, in a metaphorical sense, might be easier for John because it has defined edges and patterns, unlike chaotic and unpredictable real-life events.\nRECOMMENDATIONS:\n        -  Apply structured approaches to task management, such as using a priority matrix or checklist.\n        -  Relate the tasks to juggling by visualizing managing them like juggling items, focusing on maintaining rhythm and balance.\n        -  Take regular breaks to help reset and clear the mind, just like a juggler does between performances.\n        -  Simplify tasks into smaller, manageable components, akin to juggling fewer items first.\n</code></pre>"},{"location":"getting-started/agent-executor/","title":"Agent Executor","text":""},{"location":"getting-started/agent-executor/#agentexecutor-class","title":"AgentExecutor Class","text":"<p>The <code>AgentExecutor</code> class is a core component of the <code>dowse</code> library. It utilizes <code>emp_agents</code> to build LLM powered processing steps in an executionpipeline. It is designed to facilitate the execution of commands by processing inputs through a series of steps, including prompt generation, tool invocation, and result aggregation.</p>"},{"location":"getting-started/agent-executor/#importing-agentexecutor","title":"Importing AgentExecutor","text":"<p>To use the <code>AgentExecutor</code> class, you need to import it from the <code>dowse</code> library. Here is an example of how to import the <code>AgentExecutor</code> class:</p> <pre><code>from dowse import AgentExecutor\n</code></pre>"},{"location":"getting-started/agent-executor/#initializing-agentexecutor","title":"Initializing AgentExecutor","text":"<p>The <code>AgentExecutor</code> class is initialized with a prompt, tools, and an executor. Here is an example of how to initialize the <code>AgentExecutor</code> class:</p> <pre><code>agent_executor = AgentExecutor(\n    prompt=\"You are a helpful assistant.\",\n    tools=[],\n    executor=Executor(),\n)\n</code></pre>"},{"location":"getting-started/agent-executor/#relative-imports","title":"Relative Imports","text":"<p>The <code>AgentExecutor</code> can import its prompt, tools, and executor from the relative files to the initialiation path of the executor.</p> <p>If you structure your project like this:</p> <pre><code>dowse/\n    __init__.py\n    agent_executor.py\n    PROMPT.txt\n    tools.py\n    examples.py\n</code></pre>"},{"location":"getting-started/agent-executor/#executing-commands","title":"Executing Commands","text":"<p>The <code>AgentExecutor</code> class is executed by calling the <code>execute</code> method. Here is an example of how to execute a command:</p> <p>Tip</p> <p>The input/output type are used by as the response type when interacting with the Agent.  This forces the agent to respond in the desired type.</p> <pre><code>from pydantic import BaseModel\n\nfrom dowse import AgentExecutor\nfrom dowse.models import AgentMessage\n\nclass InputType(BaseModel):\n    name: str\n\nclass OutputType(BaseModel):\n    age: int\n\nexecutor = AgentExecutor[InputType, OutputType](\n    prompt=\"Guess the person's age given their name.\"\n)\n\noutput: AgentMessage[OutputType] = await executor.execute(InputType(name=\"John\"))\n</code></pre>"},{"location":"getting-started/examples/","title":"Training Examples","text":""},{"location":"getting-started/examples/#examples","title":"Examples","text":""},{"location":"getting-started/examples/#example-using-dowse-with-emp-agents","title":"Example: Using dowse with emp-agents","text":"<p>Here is an example of how to use the <code>dowse</code> library with <code>emp-agents</code> to create an intelligent agent that processes user notes and provides psychological analysis based on user-specific data. The <code>emp-agents</code> library is used to simulate user and assistant messages, which can be processed by the <code>dowse</code> pipeline to generate appropriate responses.</p> <pre><code>from emp_agents import UserMessage, AssistantMessage\n\nexamples = [[\n    UserMessage(content=\"Hello, how are you?\"),\n    AssistantMessage(content=\"I'm doing well, thank you for asking!\"),\n    UserMessage(content=\"What is the weather in Tokyo?\"),\n    AssistantMessage(content=\"The weather in Tokyo is sunny and warm.\"),\n]]\n</code></pre>"},{"location":"getting-started/executor/","title":"Executor","text":""},{"location":"getting-started/executor/#the-executor-class","title":"The Executor Class","text":"<p>The <code>Executor</code> class is the base class for executing actions on data as part of a pipeline.</p>"},{"location":"getting-started/executor/#importing-the-executor-class","title":"Importing the Executor Class","text":"<p>To use the <code>Executor</code> class, you need to import it from the <code>dowse</code> library. Here is an example of how to import the <code>Executor</code> class:</p> <pre><code>from dowse import Executor\n</code></pre>"},{"location":"getting-started/executor/#initializing-the-executor-class","title":"Initializing the Executor Class","text":"<p>The <code>Executor</code> class is initialized with a prompt, tools, and an executor. Here is an example of how to initialize the <code>Executor</code> class:</p> <pre><code>class MyExecutor(Executor[int, str]):\n    async def execute(self, input_: int) -&gt; str:\n        return f\"The input is {input_}\"\n</code></pre>"},{"location":"getting-started/prompt/","title":"Writing a Prompt","text":""},{"location":"getting-started/prompt/#writing-a-simple-prompt","title":"Writing a Simple Prompt","text":"<p>To create a simple prompt for your agent, you can write it in a file called <code>PROMPT.txt</code> in the same directory the agent is initialized. This file will contain the text that guides the behavior of your agent. For example, you might want your agent to act as a helpful assistant. Here is how you can write a simple prompt:</p> <ol> <li>Create a file named <code>PROMPT.txt</code> in your project directory.</li> <li>Write your prompt text in the file. For example:</li> </ol> <pre><code>You are a helpful assistant.\n</code></pre>"}]}